
概念
进程  虚拟内存
c 语言  四区

  高
         栈
  
        堆  
  
     数据区   --静态，SSD       
  
    代码区
低




class Person{
private:
    int mAge;
public:
    Person(int age){
        mAge = age;
    }
    int getAge(){
        return mAge;
    }
    static void prinf(){
        prinf("Person static function do something...");
    }
};

Person p(20);
p.getAge();
Person::prinf();

c++ 编译器 

struct Person{
    int mAge;
};
void Person_initialize(Person *p, int age){
    p->mAge = age;
}
int Person_getMAge(Person *p){
    return p->mAge;
}
void Person_prinf(){
    prinf("Person static function do something...");
}
Person p;
Person_initialize(&p, 20);
Person_getMAge(&p);
Person_prinf();


C++类对象中的成员变量和成员函数是分开存储的。C语言中的内存四区模型在C++中仍然有效
C++中类的普通成员函数都隐式包含一个指向当前对象的this指针
静态成员函数与普通成员函数的区别： 
静态成员函数不包含指向具体对象的指针
普通成员函数包含一个指向具体对象的指针
静态成员函数中不能调用普通成员函数和使用普通成员变量，也就是静态只能使用静态
普通成员函数中可以调用静态成员函数和使用静态成员变量


面向对象 c++

   类
  
  
  
 对象
    A a;
    A a(1);  
    A b = A(1);    
    A* c = new A(1);  
　　delete c;
构造函数 
析构函数

new  delete 
 
 继承
 :: 标识继承
 封装
 属性 方法  public、private 或 protected
 多态
 重写
 
 重载   方法，运算符
 
 特性
 友元  (友元函数，类）   不属于类 可以直接访问类
 模板  泛型
命名空间  


C++ 引用 vs 指针
引用很容易与指针混淆，它们之间有三个主要的不同：
不存在空引用。引用必须连接到一块合法的内存。
一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。
引用必须在创建时被初始化。指针可以在任何时间被初始化。
 
 
 
 函数调用的方式  __cdecl  __stdcall
 
 内存分配方式有三种：   
    
   1.从静态存储区域分配。内存在程序编译的时候就已经分配好，这块内存在程序的整个运行期间都存在。例如全局变量，static变量。   
    
   2.在栈上创建。在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。   
    
   3.从堆上分配，亦称动态内存分配。程序在运行的时候用malloc或new申请任意多少的内存，程序员自己负责在何时用free或delete释放内存。动态内存的生存期由我们决定，使用非常灵活，但问题也最多。
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
　　一般所说的堆栈（stack)往往是指栈，先进后出，它是一块内存区。用以存放程序的局部变量，临时变量，函数的参数，返回地址等。在这块区域中的变量的分配和释放由系统自动进行。不需要用户的参与。   
     而在堆(heap,先进先出)上的空间则是由用户进行分配，并由用户负责释放
     
     


 
 